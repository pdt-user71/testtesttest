AWSTemplateFormatVersion: '2010-09-09'
Description: Testdata Create
#キーの設定
Parameters:
  KeyName: 
    Description : Name of an existing EC2 KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription : Can contain only ASCII characters.

#----------#
#VPC構築
#----------#

Resources:
#VPC作成
  MyFirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      -

- Key: Name
        Value: CF-VPC

#ルートテーブル作成
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyFirstVPC
      Tags:
      - Key: Name
        Value: CF-VPC-PublicRT

#パブリックサブネット1A作成
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyFirstVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: "ap-northeast-1a"
      Tags:
      - Key: Name
        Value: CF-publicsubnet-1a
#パブリックサブネット1C作成
  PublicSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyFirstVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: "ap-northeast-1c"
      Tags:
      - Key: Name
        Value: CF-publicsubnet-1c

#プライベートサブネット1a作成
  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyFirstVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: "ap-northeast-1a"
      Tags:
      - Key: Name
        Value: CF-privatesubnet-1a

#プライベートサブネット1c作成
  PrivateSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyFirstVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: "ap-northeast-1c"
Tags:
      - Key: Name
        Value: CF-privatesubnet-1c

#パブリックサブネット1Aとルートテーブル紐づけ
  PubSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

#パブリックサブネット1Cとルートテーブル紐づけ
  PubSubnet1CRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1C
      RouteTableId: !Ref PublicRouteTable
KENGO KORI19:38
#インターネットゲートウェイ作成
  myInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: CF-INGW

#インターネットゲートウェイをVPCへアタッチ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyFirstVPC
      InternetGatewayId: !Ref myInternetGateway

#サブネットグループ作成
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: Subnetgroup
      DBSubnetGroupDescription: test
      SubnetIds:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet1C
      Tags:
      -
        Key: Name
        Value: Subnetgroup

#NACL作成
  Nacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyFirstVPC
      Tags:
      -
        Key: Name
        Value: rds_nacl
#インバウンドアウトバウンド設定
  InNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 3306
        To: 3306
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  OutNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 3306
        To: 3306
      RuleAction: allow
KENGO KORI19:42
Egress: true
      CidrBlock: 0.0.0.0/0

#NACLアタッチ
  ACLAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      NetworkAclId: !Ref Nacl

  ACLAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1C
      NetworkAclId: !Ref Nacl

#----------#
#EC2構築
#----------#

#EC2用セキュリティグループの作成
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: connect with ssh,HTTP,HTTPS
      VpcId: !Ref MyFirstVPC
      Tags:
      - Key: Name
        Value: EC2-secGP
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
CidrIp: 0.0.0.0/0

#RDS用セキュリティグループの作成
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: connect MySQL
      VpcId: !Ref MyFirstVPC
      Tags:
      - Key: Name
        Value: RDS-secGP
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

#インスタンス1a作成
  TrabreInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-030cf0a1edb8636ab
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1A
      BlockDeviceMappings:
        -
         DeviceName: /dev/xvda
         Ebs:
          VolumeType: gp2
          VolumeSize: 8
      Tags:
      - Key: Name
        Value: CF-public-1a
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      UserData:
Fn::Base64: |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd mariadb-server
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

echo "<html> <body> <font size="7">インスタンスA </font></body></html>" > /var/www/html/index.html
          yum install -y mysql
        
#インスタンス1c作成
  TrabreInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-030cf0a1edb8636ab
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1C
      BlockDeviceMappings:
        -
         DeviceName: /dev/xvda
         Ebs:
          VolumeType: gp2
          VolumeSize: 8
Tags:
      - Key: Name
        Value: CF-public-1c
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd mariadb-server
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user

chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "<html> <body> <font size="7">インスタンスC </font></body></html>" > /var/www/html/index.html
          yum install -y mysql

#ロードバランサーの作成
  InternetELB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: cf-elb
      Scheme: internet-facing
Type: application
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1A
        - !Ref PublicSubnet1C
      IpAddressType: ipv4

#ターゲットグループの作成
  ELBtargetGP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: ELBtargetGP
      Port: 80
      Protocol: HTTP
Targets: 
        - Id: !Ref TrabreInstance2
          Port: 80
        - Id: !Ref TrabreInstance1
          Port: 80
      TargetType: instance
      VpcId: !Ref MyFirstVPC

#リスナーの設定
  ELBListenerHTTP:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties: 
    DefaultActions: 
    - TargetGroupArn: !Ref ELBtargetGP
      Type: forward
    LoadBalancerArn: !Ref InternetELB
    Port: 80
    Protocol: HTTP
#RDSインスタンスの作成
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: DBInstance
      StorageType: gp2
      AllocatedStorage: 5
      DBInstanceClass: db.t2.small
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: Password
      DBName: mydb
      BackupRetentionPeriod: 0
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref SubnetGroup
      AvailabilityZone: "ap-northeast-1c"
      VPCSecurityGroups:
      -
       !GetAtt "RDSSecurityGroup.GroupId"
      Tags:
      -
        Key: Name
        Value: myDB
